// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo/cake.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repo "gitlab.com/cake-store-RESTFul/repo"
)

// MockCake is a mock of Cake interface.
type MockCake struct {
	ctrl     *gomock.Controller
	recorder *MockCakeMockRecorder
}

// MockCakeMockRecorder is the mock recorder for MockCake.
type MockCakeMockRecorder struct {
	mock *MockCake
}

// NewMockCake creates a new mock instance.
func NewMockCake(ctrl *gomock.Controller) *MockCake {
	mock := &MockCake{ctrl: ctrl}
	mock.recorder = &MockCakeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCake) EXPECT() *MockCakeMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCake) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCakeMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCake)(nil).Close))
}

// CountCake mocks base method.
func (m *MockCake) CountCake(ctx context.Context, search string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCake", ctx, search)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCake indicates an expected call of CountCake.
func (mr *MockCakeMockRecorder) CountCake(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCake", reflect.TypeOf((*MockCake)(nil).CountCake), ctx, search)
}

// Create mocks base method.
func (m *MockCake) Create(ctx context.Context, input repo.CakeBaseModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCakeMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCake)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockCake) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCakeMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCake)(nil).Delete), ctx, id)
}

// GetDetail mocks base method.
func (m *MockCake) GetDetail(ctx context.Context, id int) (repo.CakeBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", ctx, id)
	ret0, _ := ret[0].(repo.CakeBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockCakeMockRecorder) GetDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockCake)(nil).GetDetail), ctx, id)
}

// GetList mocks base method.
func (m *MockCake) GetList(ctx context.Context, limit, offset int, search, sort, sortBy string) ([]repo.CakeBaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, limit, offset, search, sort, sortBy)
	ret0, _ := ret[0].([]repo.CakeBaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockCakeMockRecorder) GetList(ctx, limit, offset, search, sort, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockCake)(nil).GetList), ctx, limit, offset, search, sort, sortBy)
}

// Update mocks base method.
func (m *MockCake) Update(ctx context.Context, input repo.CakeBaseModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCakeMockRecorder) Update(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCake)(nil).Update), ctx, input)
}
